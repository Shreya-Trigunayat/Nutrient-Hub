import React, { createContext, useState, useEffect } from 'react';
import axios from 'axios';

export const ProductContext = createContext();

export const ProductProvider = ({ children }) => {
  const [products, setProducts] = useState([]);  // Store fetched products
  const [loading, setLoading] = useState(false);  // Loading state
  const [category, setCategory] = useState('snacks');  // Default category
  const [page, setPage] = useState(1);  // Pagination for load more
  const [searchTerm, setSearchTerm] = useState('');  // Search term state

  // Fetch products on category change, page change, or search term change
  useEffect(() => {
    const fetchProducts = async () => {
      setLoading(true);
      try {
        const categoryUrl = `https://world.openfoodfacts.org/category/${category}.json?page=${page}`;
        const searchUrl = `https://world.openfoodfacts.org/cgi/search.pl?search_terms=${searchTerm}&json=true&page=${page}`;
        const url = searchTerm ? searchUrl : categoryUrl;

        const response = await axios.get(url);
        const newProducts = response.data.products || [];

        // Append new products to existing ones (for Load More functionality)
        setProducts((prevProducts) => [...prevProducts, ...newProducts]);
      } catch (error) {
        console.error('Error fetching products:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, [category, page, searchTerm]);

  return (
    <ProductContext.Provider
      value={{
        products,
        setCategory,
        setSearchTerm,
        setPage,
        loading
      }}
    >
      {children}
    </ProductContext.Provider>
  );
};
